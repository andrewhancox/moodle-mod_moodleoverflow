{"version":3,"file":"rating.min.js","sources":["../src/rating.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implements rating functionality\n *\n * @module     mod_moodleoverflow/rating\n * @copyright  2022 Justus Dieckmann WWU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Ajax from 'core/ajax';\nimport Prefetch from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\n\nconst RATING_DOWNVOTE = 1;\nconst RATING_UPVOTE = 2;\nconst RATING_REMOVE_DOWNVOTE = 10;\nconst RATING_REMOVE_UPVOTE = 20;\nconst RATING_SOLVED = 3;\nconst RATING_HELPFUL = 4;\n\nconst root = document.getElementById('moodleoverflow-root');\n\n/**\n * Send a vote via AJAX, then updates post and user ratings.\n * @param {int} postid\n * @param {int} rating\n * @param {int} userid\n * @returns {Promise<*>}\n */\nasync function sendVote(postid, rating, userid) {\n    const response = await Ajax.call([{\n        methodname: 'mod_moodleoverflow_record_vote',\n        args: {\n            postid: postid,\n            ratingid: rating\n        }\n    }])[0];\n    root.querySelectorAll(`[data-moodleoverflow-userreputation=\"${userid}\"]`).forEach((i) => {\n        i.textContent = response.raterreputation;\n    });\n    root.querySelectorAll(`[data-moodleoverflow-userreputation=\"${response.ownerid}\"]`).forEach((i) => {\n        i.textContent = response.ownerreputation;\n    });\n    root.querySelectorAll(`[data-moodleoverflow-postreputation=\"${postid}\"]`).forEach((i) => {\n        i.textContent = response.postrating;\n    });\n    return response;\n}\n\n\n/**\n * Init function.\n *\n * @param {int} userid\n * @param {int} allowmultiplemarks   // 1 means allowed, 0 means not allowed.\n *\n */\nexport function init(userid, allowmultiplemarks) {\n    Prefetch.prefetchStrings('mod_moodleoverflow',\n        ['marksolved', 'marknotsolved', 'markhelpful', 'marknothelpful',\n            'action_remove_upvote', 'action_upvote', 'action_remove_downvote', 'action_downvote']);\n\n    root.onclick = async(event) => {\n        const actionElement = event.target.closest('[data-moodleoverflow-action]');\n        if (!actionElement) {\n            return;\n        }\n\n        const action = actionElement.getAttribute('data-moodleoverflow-action');\n        const postElement = actionElement.closest('[data-moodleoverflow-postid]');\n        const postid = postElement?.getAttribute('data-moodleoverflow-postid');\n\n        switch (action) {\n            case 'upvote':\n            case 'downvote': {\n                const isupvote = action === 'upvote';\n                if (actionElement.getAttribute('data-moodleoverflow-state') === 'clicked') {\n                    await sendVote(postid, isupvote ? RATING_REMOVE_UPVOTE : RATING_REMOVE_DOWNVOTE, userid);\n                    actionElement.setAttribute('data-moodleoverflow-state', 'notclicked');\n                    actionElement.title = await getString('action_' + action, 'mod_moodleoverflow');\n                } else {\n                    const otherAction = isupvote ? 'downvote' : 'upvote';\n                    await sendVote(postid, isupvote ? RATING_UPVOTE : RATING_DOWNVOTE, userid);\n                    actionElement.setAttribute('data-moodleoverflow-state', 'clicked');\n                    const otherElement = postElement.querySelector(\n                        `[data-moodleoverflow-action=\"${otherAction}\"]`);\n                    otherElement.setAttribute('data-moodleoverflow-state', 'notclicked');\n                    actionElement.title = await getString('action_remove_' + action, 'mod_moodleoverflow');\n                    otherElement.title = await getString('action_' + otherAction, 'mod_moodleoverflow');\n                }\n            }\n            break;\n            case 'helpful':\n            case 'solved': {\n                const isHelpful = action === 'helpful';\n                const htmlclass = isHelpful ? 'statusstarter' : 'statusteacher';\n                const shouldRemove = postElement.classList.contains(htmlclass);\n                const baseRating = isHelpful ? RATING_HELPFUL : RATING_SOLVED;\n                const rating = shouldRemove ? baseRating * 10 : baseRating;\n                await sendVote(postid, rating, userid);\n\n                /* If multiplemarks are not allowed (that is the default mode): delete all marks.\n                   else: only delete the mark if the post is being unmarked.\n\n                   then add a mark, if the post is being marked.\n                */\n                if (allowmultiplemarks == false) {\n                    // Delete all marks in the discussion\n                    for (const el of root.querySelectorAll('.moodleoverflowpost.' + htmlclass)) {\n                        el.classList.remove(htmlclass);\n                        el.querySelector(`[data-moodleoverflow-action=\"${action}\"]`).textContent =\n                            await getString(`mark${action}`, 'mod_moodleoverflow');\n                    }\n                } else {\n                    // Remove only the mark of the unmarked post.\n                    if (shouldRemove) {\n                        postElement.classList.remove(htmlclass);\n                        actionElement.textContent = await getString(`mark${action}`, 'mod_moodleoverflow');\n                    }\n                }\n                // If the post is being marked, mark it.\n                if (!shouldRemove) {\n                    postElement.classList.add(htmlclass);\n                    actionElement.textContent = await getString(`marknot${action}`, 'mod_moodleoverflow');\n                }\n            }\n        }\n    };\n\n}"],"names":["userid","allowmultiplemarks","prefetchStrings","root","onclick","async","actionElement","event","target","closest","action","getAttribute","postElement","postid","isupvote","sendVote","RATING_REMOVE_UPVOTE","RATING_REMOVE_DOWNVOTE","setAttribute","title","otherAction","RATING_UPVOTE","RATING_DOWNVOTE","otherElement","querySelector","isHelpful","htmlclass","shouldRemove","classList","contains","baseRating","RATING_HELPFUL","RATING_SOLVED","rating","el","querySelectorAll","remove","textContent","add","document","getElementById","response","Ajax","call","methodname","args","ratingid","forEach","i","raterreputation","ownerid","ownerreputation","postrating"],"mappings":";;;;;;;oFAsEqBA,OAAQC,sCAChBC,gBAAgB,qBACrB,CAAC,aAAc,gBAAiB,cAAe,iBAC3C,uBAAwB,gBAAiB,yBAA0B,oBAE3EC,KAAKC,QAAUC,oBACLC,cAAgBC,MAAMC,OAAOC,QAAQ,oCACtCH,2BAICI,OAASJ,cAAcK,aAAa,8BACpCC,YAAcN,cAAcG,QAAQ,gCACpCI,OAASD,yBAAAA,YAAaD,aAAa,qCAEjCD,YACC,aACA,kBACKI,SAAsB,WAAXJ,UAC+C,YAA5DJ,cAAcK,aAAa,mCACrBI,SAASF,OAAQC,SAAWE,qBAAuBC,uBAAwBjB,QACjFM,cAAcY,aAAa,4BAA6B,cACxDZ,cAAca,YAAc,mBAAU,UAAYT,OAAQ,0BACvD,OACGU,YAAcN,SAAW,WAAa,eACtCC,SAASF,OAAQC,SAAWO,cAAgBC,gBAAiBtB,QACnEM,cAAcY,aAAa,4BAA6B,iBAClDK,aAAeX,YAAYY,qDACGJ,mBACpCG,aAAaL,aAAa,4BAA6B,cACvDZ,cAAca,YAAc,mBAAU,iBAAmBT,OAAQ,sBACjEa,aAAaJ,YAAc,mBAAU,UAAYC,YAAa,iCAIjE,cACA,gBACKK,UAAuB,YAAXf,OACZgB,UAAYD,UAAY,gBAAkB,gBAC1CE,aAAef,YAAYgB,UAAUC,SAASH,WAC9CI,WAAaL,UAAYM,eAAiBC,cAC1CC,OAASN,aAA4B,GAAbG,WAAkBA,oBAC1Cf,SAASF,OAAQoB,OAAQjC,QAOL,GAAtBC,uBAEK,MAAMiC,MAAM/B,KAAKgC,iBAAiB,uBAAyBT,WAC5DQ,GAAGN,UAAUQ,OAAOV,WACpBQ,GAAGV,qDAA8Cd,cAAY2B,kBACnD,iCAAiB3B,QAAU,2BAIrCiB,eACAf,YAAYgB,UAAUQ,OAAOV,WAC7BpB,cAAc+B,kBAAoB,iCAAiB3B,QAAU,uBAIhEiB,eACDf,YAAYgB,UAAUU,IAAIZ,WAC1BpB,cAAc+B,kBAAoB,oCAAoB3B,QAAU,iHA9G9EY,gBAAkB,EAClBD,cAAgB,EAChBJ,uBAAyB,GACzBD,qBAAuB,GACvBgB,cAAgB,EAChBD,eAAiB,EAEjB5B,KAAOoC,SAASC,eAAe,sCAStBzB,SAASF,OAAQoB,OAAQjC,cAC9ByC,eAAiBC,cAAKC,KAAK,CAAC,CAC9BC,WAAY,iCACZC,KAAM,CACFhC,OAAQA,OACRiC,SAAUb,WAEd,UACJ9B,KAAKgC,gEAAyDnC,cAAY+C,SAASC,IAC/EA,EAAEX,YAAcI,SAASQ,eAAzB,IAEJ9C,KAAKgC,gEAAyDM,SAASS,eAAaH,SAASC,IACzFA,EAAEX,YAAcI,SAASU,eAAzB,IAEJhD,KAAKgC,gEAAyDtB,cAAYkC,SAASC,IAC/EA,EAAEX,YAAcI,SAASW,UAAzB,IAEGX"}